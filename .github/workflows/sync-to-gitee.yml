name: üöÄ Sync GitHub Release to Gitee

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
    - name: ‚¨áÔ∏è Checkout ‰ªìÂ∫ì‰ª£Á†ÅÔºàÂê´ tagÔºâ
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: üîñ Ëé∑ÂèñÊúÄÊñ∞ tagÔºàactions-ecosystemÔºâ
      id: get-tag
      uses: actions-ecosystem/action-get-latest-tag@v1

    - name: üìå ÂÜôÂÖ• tag Âà∞ÁéØÂ¢ÉÂèòÈáè
      run: echo "LATEST_TAG=${{ steps.get-tag.outputs.tag }}" >> $GITHUB_ENV

    - name: üßæ ÊâìÂç∞ÊúÄÊñ∞ tag
      run: echo "Latest GitHub tag is $LATEST_TAG"

    - name: üì¶ ‰∏ãËΩΩ GitHub Release ÈôÑ‰ª∂
      run: |
        AUTH_HEADER="Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
        GH_API="https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_TAG"

        echo "üì° ËØ∑Ê±ÇÂú∞ÂùÄ: $GH_API"
        curl -sSL -H "$AUTH_HEADER" "$GH_API" > release.json

        if ! jq -e '.assets' release.json > /dev/null; then
          echo "‚ùå Êó†Ê≥ïËé∑Âèñ Release ÈôÑ‰ª∂‰ø°ÊÅØÔºö"
          cat release.json
          exit 1
        fi

        jq -r '.assets[] | "\(.name) \(.url)"' release.json > assets.txt

        while read -r name url; do
          echo "‚¨áÔ∏è ‰∏ãËΩΩ $name ..."
          curl -L -H "$AUTH_HEADER" -H "Accept: application/octet-stream" "$url" -o "$name"
        done < assets.txt

    - name: üì§ ‰∏ä‰º†Âà∞ Gitee Release
      run: |
        # ‚úÇÔ∏è ÂΩªÂ∫ïÊ∏ÖÊ¥ó repo ÂêçÔºåÂéªÈô§Êç¢Ë°å„ÄÅÁ©∫Ê†º„ÄÅÊéßÂà∂Á¨¶
        GITEE_REPO_CLEAN=$(echo "${{ secrets.GITEE_REPO }}" | tr -cd '[:alnum:]/_-')

        echo "üß™ GITEE_REPO_CLEAN (hex):"
        echo "$GITEE_REPO_CLEAN" | xxd
        echo "üß™ GITEE_REPO_CLEAN (string): [$GITEE_REPO_CLEAN]"

        NAME="Release $LATEST_TAG"
        BODY="ÂêåÊ≠•Ëá™ GitHub ÁöÑ Release $LATEST_TAG"
        GITEE_API="https://gitee.com/api/v5/repos/$GITEE_REPO_CLEAN/releases"

        echo "üöÄ ÂàõÂª∫ Gitee Release..."
        response=$(curl -s -X POST "$GITEE_API" \
          -H "Content-Type: application/json" \
          -d "{
            \"access_token\": \"${{ secrets.GITEE_TOKEN }}\",
            \"tag_name\": \"$LATEST_TAG\",
            \"name\": \"$NAME\",
            \"body\": \"$BODY\",
            \"target_commitish\": \"master\"
          }")

        echo "$response"

        release_id=$(echo "$response" | grep -o '"id":[0-9]*' | grep -o '[0-9]*')
        if [ -z "$release_id" ]; then
          echo "‚ùå Gitee Release ÂàõÂª∫Â§±Ë¥•„ÄÇ"
          exit 1
        fi

        echo "üì§ ÂºÄÂßã‰∏ä‰º†ÈôÑ‰ª∂..."
        for file in *; do
          [ -f "$file" ] || continue
          echo "üì§ Ê≠£Âú®‰∏ä‰º† $file Âà∞ Gitee..."

          ENCODED_FILENAME=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$file'''))")
          UPLOAD_URL="https://gitee.com/api/v5/repos/$GITEE_REPO_CLEAN/releases/$release_id/assets"

          echo "üîó ÊãºÊé•‰∏ä‰º†Âú∞ÂùÄ: $UPLOAD_URL"

          # ‚úÖ Á°ÆËÆ§‰∏ä‰º†Âú∞ÂùÄÊòØÂê¶ÂêàÊ≥ï
          python3 -c "from urllib.parse import urlparse; u=urlparse('$UPLOAD_URL'); assert all([u.scheme, u.netloc, u.path]), f'‚ùå URL ÈùûÊ≥ï: {UPLOAD_URL}'"

          http_code=$(curl -w "%{http_code}" -o /tmp/response.json -X POST "$UPLOAD_URL" \
            -H "Content-Type: multipart/form-data" \
            -F "access_token=${{ secrets.GITEE_TOKEN }}" \
            -F "name=$ENCODED_FILENAME" \
            -F "attachment=@$file")

          echo "üîé ËøîÂõûÁä∂ÊÄÅÁ†Å: $http_code"

          if [ "$http_code" != "201" ]; then
            echo "‚ùå ‰∏ä‰º† $file Â§±Ë¥•ÔºåÂìçÂ∫îÂ¶Ç‰∏ãÔºö"
            cat /tmp/response.json
            exit 1
          else
            echo "‚úÖ ‰∏ä‰º†ÊàêÂäüÔºö$file"
          fi
        done
