name: üöÄ Sync GitHub Release to Gitee

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
    - name: ‚¨áÔ∏è Checkout code (with tags)
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: üîñ Get latest Git tag
      id: get-tag
      uses: actions-ecosystem/action-get-latest-tag@v1

    - name: üìå Export tag to env
      run: echo "LATEST_TAG=${{ steps.get-tag.outputs.tag }}" >> $GITHUB_ENV

    - name: üßæ Show tag
      run: echo "Latest tag is $LATEST_TAG"

    - name: üì¶ Download GitHub Release assets
      run: |
        AUTH="Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
        API="https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_TAG"
        echo "üì° Requesting $API"
        curl -sSL -H "$AUTH" "$API" > release.json

        if ! jq -e '.assets' release.json >/dev/null; then
          echo "‚ùå Failed to fetch assets list"
          cat release.json
          exit 1
        fi

        jq -r '.assets[] | "\(.name) \(.url)"' release.json > assets.txt
        while read -r name url; do
          echo "‚¨áÔ∏è Downloading $name"
          curl -L -H "$AUTH" -H "Accept: application/octet-stream" "$url" -o "$name"
        done < assets.txt

    - name: üì§ Create Gitee Release & upload assets
      run: |
        # Clean up any stray newlines in the repo name
        RAW_REPO="${{ secrets.GITEE_REPO }}"
        CLEAN_REPO="${RAW_REPO//$'\n'/}"
        CLEAN_REPO="${CLEAN_REPO//$'\r'/}"

        echo "üß™ Using repo: [$CLEAN_REPO]"

        # Create the release
        CREATE_URL="https://gitee.com/api/v5/repos/$CLEAN_REPO/releases?access_token=${{ secrets.GITEE_TOKEN }}"
        echo "üöÄ Creating Gitee release via $CREATE_URL"
        resp=$(curl -s -X POST "$CREATE_URL" \
          -H "Content-Type: application/json" \
          -d "{
            \"tag_name\":\"$LATEST_TAG\",
            \"name\":\"Release $LATEST_TAG\",
            \"body\":\"ÂêåÊ≠•Ëá™ GitHub Release $LATEST_TAG\",
            \"target_commitish\":\"master\"
          }")
        echo "$resp"

        release_id=$(echo "$resp" | jq -r '.id')
        if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
          echo "‚ùå Failed to create Gitee release (invalid id)" >&2
          exit 1
        fi
        echo "‚úî Created Gitee release ID: $release_id"

        # Upload each asset
        for file in *; do
          [ -f "$file" ] || continue
          echo "üì§ Uploading $file ‚Ä¶"

          # URL-encode the filename
          ef=$(python3 -c "import sys,urllib.parse; print(urllib.parse.quote(sys.argv[1]))" "$file")

          UPLOAD_URL="https://gitee.com/api/v5/repos/$CLEAN_REPO/releases/$release_id/attach_files?access_token=${{ secrets.GITEE_TOKEN }}"
          echo "üîó POST $UPLOAD_URL"

          http_code=$(curl -w "%{http_code}" -o /tmp/resp.json -X POST "$UPLOAD_URL" \
            -F "attachment=@$file" \
            -F "name=$ef")

          if [ "$http_code" != "201" ]; then
            echo "‚ùå Upload $file failed (HTTP $http_code)" >&2
            cat /tmp/resp.json >&2
            exit 1
          else
            echo "‚úÖ Uploaded $file"
          fi
        done
