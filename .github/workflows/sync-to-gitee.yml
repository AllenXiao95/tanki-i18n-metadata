name: üöÄ Sync GitHub Release to Gitee

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
    - name: ‚¨áÔ∏è Checkout ‰ªìÂ∫ì‰ª£Á†ÅÔºàÂê´ tagÔºâ
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: üîñ Ëé∑ÂèñÊúÄÊñ∞ tag
      id: get-tag
      uses: actions-ecosystem/action-get-latest-tag@v1

    - name: üìå ÂÜôÂÖ• tag ÁéØÂ¢ÉÂèòÈáè
      run: echo "LATEST_TAG=${{ steps.get-tag.outputs.tag }}" >> $GITHUB_ENV

    - name: üßæ ÊâìÂç∞ÊúÄÊñ∞ tag
      run: echo "Latest GitHub tag is $LATEST_TAG"

    - name: üì¶ ‰∏ãËΩΩ GitHub Release ÈôÑ‰ª∂
      run: |
        AUTH="Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
        API="https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_TAG"

        echo "üì° ËØ∑Ê±ÇÔºö$API"
        curl -sSL -H "$AUTH" "$API" > release.json

        if ! jq -e '.assets' release.json >/dev/null; then
          echo "‚ùå Êó†Ê≥ïËé∑ÂèñÈôÑ‰ª∂ÂàóË°®"
          cat release.json
          exit 1
        fi

        jq -r '.assets[] | "\(.name) \(.url)"' release.json > assets.txt
        while read -r name url; do
          echo "‚¨áÔ∏è ‰∏ãËΩΩ $name"
          curl -L -H "$AUTH" -H "Accept: application/octet-stream" "$url" -o "$name"
        done < assets.txt

    - name: üì§ ‰∏ä‰º†Âà∞ Gitee Release
      run: |
        # Ê∏ÖÊ¥ó‰ªìÂ∫ìÂêç
        RAW="${{ secrets.GITEE_REPO }}"
        CLEAN="${RAW//$'\n'/}"; CLEAN="${CLEAN//$'\r'/}"

        echo "üß™ CLEAN REPO HEX:"; echo -n "$CLEAN" | xxd
        echo "üß™ CLEAN REPO: [$CLEAN]"

        NAME="Release $LATEST_TAG"
        BODY="ÂêåÊ≠•Ëá™ GitHub Release $LATEST_TAG"
        CREATE_API="https://gitee.com/api/v5/repos/$CLEAN/releases"

        echo "üöÄ ÂàõÂª∫ Gitee Release..."
        resp=$(curl -s -X POST "$CREATE_API" \
          -H "Content-Type: application/json" \
          -d "{
            \"access_token\":\"${{ secrets.GITEE_TOKEN }}\",
            \"tag_name\":\"$LATEST_TAG\",
            \"name\":\"$NAME\",
            \"body\":\"$BODY\",
            \"target_commitish\":\"master\"
          }")
        echo "$resp"

        release_id=$(echo "$resp" | jq -r '.id')
        if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
          echo "‚ùå Release ÂàõÂª∫Â§±Ë¥•Êàñ id Êó†Êïà"
          exit 1
        fi

        echo "üì§ ÂºÄÂßã‰∏ä‰º†ÈôÑ‰ª∂Âà∞ release_id=$release_id"
        for file in *; do
          [ -f "$file" ] || continue
          echo "üì§ $file"

          ef=$(python3 -c "import sys,urllib.parse; print(urllib.parse.quote(sys.argv[1]))" "$file")
          UPLOAD_URL="https://gitee.com/api/v5/repos/$CLEAN/releases/$release_id/assets"

          echo "üîó ‰∏ä‰º†Âú∞ÂùÄ: $UPLOAD_URL"
          python3 -c "import sys; from urllib.parse import urlparse; u=urlparse(sys.argv[1]); assert u.scheme and u.netloc and u.path, f'‚ùå ÈùûÊ≥ï URL: {sys.argv[1]}'" "$UPLOAD_URL"

          http_code=$(curl -w "%{http_code}" -o /tmp/resp.json -X POST "$UPLOAD_URL" \
            -H "Content-Type: multipart/form-data" \
            -F "access_token=${{ secrets.GITEE_TOKEN }}" \
            -F "name=$ef" \
            -F "attachment=@$file")

          echo "üîé HTTP Áä∂ÊÄÅÁ†Å: $http_code"
          if [ "$http_code" != "201" ]; then
            echo "‚ùå ‰∏ä‰º† $file Â§±Ë¥•ÔºåÂìçÂ∫îÔºö"
            cat /tmp/resp.json
            exit 1
          else
            echo "‚úÖ ‰∏ä‰º†ÊàêÂäü: $file"
          fi
        done
